
/*
 *app animations
 */

@keyframes jump {
 0%{
	transform: translateY(100%);
 }
 60%{
	transform: translateY(-7%);
 }
 70%{
	transform: translateY(0);
 }
 80%{
	transform: translateY(-3%);
 }
 100%{
	transform: translateY(0);
 }
}

@keyframes fall {
 0%{
     opacity: 0.4;
     transform: translateY(-30%);
 }
 60%{
     opacity: 0.6;
 }
 70%{
     opacity: 0.8;
 }
 90%{
     opacity: 1;
     transform: translateY(9%);
 }
 100%{
     transform: translateY(0);
 }
}

@keyframes shrinkLeft {
 0%{
     width: 100%;
 }
 60%{
     opacity: 0.8;
 }
 70%{
     opacity: 0.7;
 }
 80%{
     opacity: 0.4;
 }
 90%{
     opacity: 0.3;
 }
 100%{
     opacity: 0.2;
     width: 0;
 }
}

@keyframes growRight {
 0%{
     width: 10%;
     min-height: 90px;
 }
 70%{
     width: 115%;
 }
 100%{
     width: 100%;
 }
}

@keyframes flipInX {
  from {
    transform: perspective(400px) rotate3d(1, 0, 0, 90deg);
    animation-timing-function: ease-in;
    opacity: 0;
  }

  40% {
    transform: perspective(400px) rotate3d(1, 0, 0, -20deg);
    animation-timing-function: ease-in;
  }

  60% {
    transform: perspective(400px) rotate3d(1, 0, 0, 10deg);
    opacity: 1;
  }

  80% {
    transform: perspective(400px) rotate3d(1, 0, 0, -5deg);
  }

  to {
    transform: perspective(400px);
  }
}

@keyframes flipOutX {
  from {
    transform: perspective(400px);
  }

  30% {
    transform: perspective(400px) rotate3d(1, 0, 0, -20deg);
    opacity: 1;
  }

  to {
    transform: perspective(400px) rotate3d(1, 0, 0, 90deg);
    opacity: 0;
  }
}

 /*
       * Constants:
       *      RADIUS      = 12.5
       *      STROKEWIDTH = 3
       *      ARCSIZE     = 270 degrees (amount of circle the arc takes up)
       *      ARCTIME     = 1333ms (time it takes to expand and contract arc)
       *      ARCSTARTROT = 216 degrees (how much the start location of the arc
       *                                should rotate each time, 216 gives us a
       *                                5 pointed star shape (it's 360/5 * 2).
       *                                For a 7 pointed star, we might do
       *                                360/7 * 3 = 154.286)
       *
       *      SHRINK_TIME = 400ms
       */
 
 .spinner {
  margin: 10px 20px;
  text-align: center;
  display: inline-block;
 }
 
 .spinner svg {
  background-color: rgb(255, 255, 255);
  border-radius: 50%;
  padding: 8px;
  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);
 }
 
 .qp-circular-loader {
  width: 64px;
  /* 2*RADIUS + STROKEWIDTH */
  
  height: 64px;
  /* 2*RADIUS + STROKEWIDTH */
  
  stroke-width: 3px;
 }
 
 .qp-circular-loader-path {
  stroke-dasharray: 58.9;
  /* 2*RADIUS*PI * ARCSIZE/360 */
  
  stroke-dashoffset: 58.9;
  /* 2*RADIUS*PI * ARCSIZE/360 */
  /* hides things initially */
 }
 /* SVG elements seem to have a different default origin */
 
 .qp-circular-loader,
 .qp-circular-loader * {
  transform-origin: 50% 50%;
 }
 /* Rotating the whole thing */
 
 @keyframes rotate {
  from {
   transform: rotate(0deg);
  }
  to {
   transform: rotate(360deg);
  }
 }
 
 .qp-circular-loader {
  animation-name: rotate;
  animation-duration: 1568.63ms;
  /* 360 * ARCTIME / (ARCSTARTROT + (360-ARCSIZE)) */
  
  animation-iteration-count: infinite;
  animation-timing-function: linear;
 }
 /* Filling and unfilling the arc */
 
 @keyframes fillunfill {
  from {
   stroke-dashoffset: 58.8
   /* 2*RADIUS*PI * ARCSIZE/360 - 0.1 */
   /* 0.1 a bit of a magic constant here */
  }
  50% {
   stroke-dashoffset: 0;
  }
  to {
   stroke-dashoffset: -58.4
   /* -(2*RADIUS*PI * ARCSIZE/360 - 0.5) */
   /* 0.5 a bit of a magic constant here */
  }
 }
 
 @keyframes rot {
  from {
   transform: rotate(0deg);
  }
  to {
   transform: rotate(-360deg);
  }
 }
 
 @keyframes colors {
  0% {
   stroke: #754fa0;
  }
  20% {
   stroke: #09b7bf;
  }
  40% {
   stroke: #90d36b;
  }
  60% {
   stroke: #f2d40d;
  }
  80% {
   stroke: #fcb12b;
  }
  100% {
   stroke: #ed1b72;
  }
 }
 
 .qp-circular-loader-path {
  animation-name: fillunfill, rot, colors;
  animation-duration: 1333ms, 5332ms, 5332ms;
  /* ARCTIME, 4*ARCTIME, 4*ARCTIME */
  
  animation-iteration-count: infinite, infinite, infinite;
  animation-timing-function: cubic-bezier(0.4, 0.0, 0.2, 1), steps(4), linear;
  animation-play-state: running, running, running;
  animation-fill-mode: forwards;
 }
